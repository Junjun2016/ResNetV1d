2021-08-28 15:36:09,050 - mmseg - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.11 (default, Aug  3 2021, 15:09:35) [GCC 7.5.0]
CUDA available: True
GPU 0,1,2,3: Tesla V100-SXM2-32GB
CUDA_HOME: /mnt/cache/share/polaris/dep/cuda-9.0-cudnn7.6.5
GCC: gcc (GCC) 5.4.0
PyTorch: 1.8.0+cu111
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.9.0+cu111
OpenCV: 4.5.3
MMCV: 1.3.11
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.1
MMSegmentation: 0.16.0+e235c1a
------------------------------------------------------------

2021-08-28 15:36:09,051 - mmseg - INFO - Distributed training: True
2021-08-28 15:36:10,001 - mmseg - INFO - Config:
norm_cfg = dict(type='SyncBN', requires_grad=True)
model = dict(
    type='EncoderDecoder',
    pretrained=None,
    backbone=dict(
        type='ResNetV1d',
        depth=101,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 2, 4),
        strides=(1, 2, 1, 1),
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True,
        init_cfg=dict(
            type='Pretrained',
            checkpoint=
            'https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth',
            prefix='backbone.')),
    decode_head=dict(
        type='ASPPHead',
        in_channels=2048,
        in_index=3,
        channels=512,
        dilations=(1, 12, 24, 36),
        dropout_ratio=0.1,
        num_classes=19,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=1024,
        in_index=2,
        channels=256,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=19,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'CityscapesDataset'
data_root = 'data/cityscapes/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
crop_size = (512, 1024)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),
    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_semantic_seg'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(2048, 1024),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=2,
    train=dict(
        type='CityscapesDataset',
        data_root='data/cityscapes/',
        img_dir='leftImg8bit/train',
        ann_dir='gtFine/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(
                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),
            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_semantic_seg'])
        ]),
    val=dict(
        type='CityscapesDataset',
        data_root='data/cityscapes/',
        img_dir='leftImg8bit/val',
        ann_dir='gtFine/val',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CityscapesDataset',
        data_root='data/cityscapes/',
        img_dir='leftImg8bit/val',
        ann_dir='gtFine/val',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
log_config = dict(
    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = 'work_dirs/deeplabv3_r101-v1d-d8_512x1024_80k_cityscapes/latest.pth'
workflow = [('train', 1)]
cudnn_benchmark = True
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)
optimizer_config = dict()
lr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)
runner = dict(type='IterBasedRunner', max_iters=80000)
checkpoint_config = dict(by_epoch=False, interval=8000)
evaluation = dict(interval=8000, metric='mIoU', pre_eval=True)
work_dir = './work_dirs/deeplabv3_r101-v1d-d8_512x1024_80k_cityscapes'
gpu_ids = range(0, 1)

2021-08-28 15:36:10,001 - mmseg - INFO - Set random seed to 0, deterministic: False
2021-08-28 15:36:16,059 - mmseg - INFO - initialize ResNetV1d with init_cfg {'type': 'Pretrained', 'checkpoint': 'https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth', 'prefix': 'backbone.'}
2021-08-28 15:36:31,347 - mmseg - INFO - initialize ASPPHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
2021-08-28 15:36:31,597 - mmseg - INFO - initialize FCNHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
Name of parameter - Initialization information

backbone.stem.0.weight - torch.Size([32, 3, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stem.1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stem.1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stem.3.weight - torch.Size([32, 32, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stem.4.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stem.4.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stem.6.weight - torch.Size([64, 32, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stem.7.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stem.7.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer1.0.downsample.1.weight - torch.Size([256, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer1.0.downsample.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer1.0.downsample.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.0.downsample.1.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.0.downsample.2.weight - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.0.downsample.2.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.0.downsample.1.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.0.downsample.2.weight - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.0.downsample.2.bias - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.6.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.6.bn1.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.6.bn1.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.6.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.6.bn2.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.6.bn2.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.6.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.6.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.6.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.7.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.7.bn1.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.7.bn1.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.7.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.7.bn2.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.7.bn2.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.7.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.7.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.7.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.8.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.8.bn1.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.8.bn1.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.8.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.8.bn2.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.8.bn2.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.8.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.8.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.8.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.9.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.9.bn1.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.9.bn1.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.9.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.9.bn2.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.9.bn2.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.9.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.9.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.9.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.10.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.10.bn1.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.10.bn1.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.10.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.10.bn2.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.10.bn2.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.10.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.10.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.10.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.11.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.11.bn1.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.11.bn1.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.11.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.11.bn2.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.11.bn2.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.11.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.11.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.11.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.12.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.12.bn1.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.12.bn1.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.12.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.12.bn2.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.12.bn2.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.12.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.12.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.12.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.13.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.13.bn1.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.13.bn1.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.13.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.13.bn2.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.13.bn2.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.13.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.13.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.13.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.14.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.14.bn1.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.14.bn1.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.14.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.14.bn2.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.14.bn2.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.14.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.14.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.14.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.15.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.15.bn1.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.15.bn1.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.15.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.15.bn2.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.15.bn2.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.15.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.15.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.15.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.16.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.16.bn1.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.16.bn1.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.16.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.16.bn2.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.16.bn2.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.16.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.16.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.16.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.17.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.17.bn1.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.17.bn1.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.17.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.17.bn2.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.17.bn2.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.17.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.17.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.17.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.18.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.18.bn1.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.18.bn1.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.18.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.18.bn2.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.18.bn2.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.18.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.18.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.18.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.19.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.19.bn1.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.19.bn1.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.19.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.19.bn2.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.19.bn2.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.19.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.19.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.19.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.20.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.20.bn1.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.20.bn1.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.20.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.20.bn2.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.20.bn2.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.20.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.20.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.20.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.21.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.21.bn1.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.21.bn1.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.21.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.21.bn2.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.21.bn2.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.21.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.21.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.21.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.22.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.22.bn1.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.22.bn1.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.22.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.22.bn2.weight - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.22.bn2.bias - torch.Size([256]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.22.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.22.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer3.22.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer4.0.downsample.1.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer4.0.downsample.2.weight - torch.Size([2048]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer4.0.downsample.2.bias - torch.Size([2048]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth 

decode_head.conv_seg.weight - torch.Size([19, 512, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([19]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.image_pool.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.image_pool.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.image_pool.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.0.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.0.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.0.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.1.conv.weight - torch.Size([512, 2048, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.2.conv.weight - torch.Size([512, 2048, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.3.conv.weight - torch.Size([512, 2048, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.conv.weight - torch.Size([512, 2560, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.bottleneck.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.conv_seg.weight - torch.Size([19, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.conv_seg.bias - torch.Size([19]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.convs.0.conv.weight - torch.Size([256, 1024, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2021-08-28 15:36:31,602 - mmseg - INFO - EncoderDecoder(
  (backbone): ResNetV1d(
    (stem): Sequential(
      (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (1): SyncBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): SyncBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace=True)
      (6): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace=True)
    )
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): AvgPool2d(kernel_size=1, stride=1, padding=0)
          (1): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): AvgPool2d(kernel_size=2, stride=2, padding=0)
          (1): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): AvgPool2d(kernel_size=1, stride=1, padding=0)
          (1): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (6): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (7): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (8): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (9): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (10): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (11): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (12): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (13): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (14): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (15): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (16): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (17): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (18): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (19): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (20): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (21): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (22): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): AvgPool2d(kernel_size=1, stride=1, padding=0)
          (1): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
        (bn2): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
        (bn2): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
  )
  init_cfg={'type': 'Pretrained', 'checkpoint': 'https://download.openmmlab.com/mmclassification/v0/resnet/resnetv1d101_b32x8_imagenet_20210531-6e13bcd3.pth', 'prefix': 'backbone.'}
  (decode_head): ASPPHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): CrossEntropyLoss()
    (conv_seg): Conv2d(512, 19, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (image_pool): Sequential(
      (0): AdaptiveAvgPool2d(output_size=1)
      (1): ConvModule(
        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
    )
    (aspp_modules): ASPPModule(
      (0): ConvModule(
        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (1): ConvModule(
        (conv): Conv2d(2048, 512, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), bias=False)
        (bn): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (2): ConvModule(
        (conv): Conv2d(2048, 512, kernel_size=(3, 3), stride=(1, 1), padding=(24, 24), dilation=(24, 24), bias=False)
        (bn): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (3): ConvModule(
        (conv): Conv2d(2048, 512, kernel_size=(3, 3), stride=(1, 1), padding=(36, 36), dilation=(36, 36), bias=False)
        (bn): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
    )
    (bottleneck): ConvModule(
      (conv): Conv2d(2560, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (activate): ReLU(inplace=True)
    )
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
  (auxiliary_head): FCNHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): CrossEntropyLoss()
    (conv_seg): Conv2d(256, 19, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (convs): Sequential(
      (0): ConvModule(
        (conv): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
    )
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
)
2021-08-28 15:36:31,681 - mmseg - INFO - Loaded 2975 images
2021-08-28 15:36:44,354 - mmseg - INFO - Loaded 500 images
2021-08-28 15:36:44,359 - mmseg - INFO - load checkpoint from work_dirs/deeplabv3_r101-v1d-d8_512x1024_80k_cityscapes/latest.pth
2021-08-28 15:36:44,359 - mmseg - INFO - Use load_from_local loader
2021-08-28 15:37:02,679 - mmseg - INFO - resumed from epoch: 87, iter 71999
2021-08-28 15:37:02,682 - mmseg - INFO - Start running, host: hejunjun@SH-IDC1-10-198-4-145, work_dir: /mnt/lustre/hejunjun/open-mmlab/resnetv1d/work_dirs/deeplabv3_r101-v1d-d8_512x1024_80k_cityscapes
2021-08-28 15:37:02,682 - mmseg - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2021-08-28 15:37:02,693 - mmseg - INFO - workflow: [('train', 1)], max: 80000 iters
2021-08-28 15:41:04,964 - mmseg - INFO - Saving checkpoint at 72000 iterations
2021-08-28 15:41:14,682 - mmseg - INFO - Exp name: deeplabv3_r101-v1d-d8_512x1024_80k_cityscapes.py
2021-08-28 15:41:14,683 - mmseg - INFO - Iter [72000/80000]	lr: 1.346e-03, eta: 104 days, 17:28:11, time: 22.621, data_time: 2.339, memory: 18885, decode.loss_seg: 0.1697, decode.acc_seg: 90.2025, aux.loss_seg: 0.0867, aux.acc_seg: 89.6351, loss: 0.2564
2021-08-28 15:44:42,263 - mmseg - INFO - per class results:
2021-08-28 15:44:42,331 - mmseg - INFO - 
+---------------+-------+-------+
|     Class     |  IoU  |  Acc  |
+---------------+-------+-------+
|      road     | 98.21 | 98.86 |
|    sidewalk   | 85.49 |  93.3 |
|    building   | 92.91 | 96.62 |
|      wall     | 54.88 | 60.66 |
|     fence     | 61.26 | 72.26 |
|      pole     | 65.45 | 76.21 |
| traffic light |  71.0 | 79.32 |
|  traffic sign | 78.93 | 84.53 |
|   vegetation  | 92.41 | 97.08 |
|    terrain    | 65.04 | 73.67 |
|      sky      | 94.52 | 98.09 |
|     person    | 82.47 | 92.12 |
|     rider     |  63.5 | 77.43 |
|      car      | 95.35 | 98.04 |
|     truck     | 80.75 | 87.93 |
|      bus      | 88.14 | 90.69 |
|     train     | 82.47 | 87.42 |
|   motorcycle  | 62.92 | 74.29 |
|    bicycle    | 77.91 | 88.16 |
+---------------+-------+-------+
2021-08-28 15:44:42,332 - mmseg - INFO - Summary:
2021-08-28 15:44:42,338 - mmseg - INFO - 
+------+-------+-------+
| aAcc |  mIoU |  mAcc |
+------+-------+-------+
| 96.2 | 78.61 | 85.61 |
+------+-------+-------+
2021-08-28 15:44:42,347 - mmseg - INFO - Exp name: deeplabv3_r101-v1d-d8_512x1024_80k_cityscapes.py
2021-08-28 15:44:42,347 - mmseg - INFO - Iter(val) [125]	aAcc: 0.9620, mIoU: 0.7861, mAcc: 0.8561, IoU.road: 0.9821, IoU.sidewalk: 0.8549, IoU.building: 0.9291, IoU.wall: 0.5488, IoU.fence: 0.6126, IoU.pole: 0.6545, IoU.traffic light: 0.7100, IoU.traffic sign: 0.7893, IoU.vegetation: 0.9241, IoU.terrain: 0.6504, IoU.sky: 0.9452, IoU.person: 0.8247, IoU.rider: 0.6350, IoU.car: 0.9535, IoU.truck: 0.8075, IoU.bus: 0.8814, IoU.train: 0.8247, IoU.motorcycle: 0.6292, IoU.bicycle: 0.7791, Acc.road: 0.9886, Acc.sidewalk: 0.9330, Acc.building: 0.9662, Acc.wall: 0.6066, Acc.fence: 0.7226, Acc.pole: 0.7621, Acc.traffic light: 0.7932, Acc.traffic sign: 0.8453, Acc.vegetation: 0.9708, Acc.terrain: 0.7367, Acc.sky: 0.9809, Acc.person: 0.9212, Acc.rider: 0.7743, Acc.car: 0.9804, Acc.truck: 0.8793, Acc.bus: 0.9069, Acc.train: 0.8742, Acc.motorcycle: 0.7429, Acc.bicycle: 0.8816
2021-08-28 15:45:56,132 - mmseg - INFO - Iter [72050/80000]	lr: 1.339e-03, eta: 2 days, 13:09:12, time: 5.625, data_time: 4.163, memory: 18885, decode.loss_seg: 0.1108, decode.acc_seg: 90.0903, aux.loss_seg: 0.0551, aux.acc_seg: 89.5163, loss: 0.1658
2021-08-28 15:47:04,578 - mmseg - INFO - Iter [72100/80000]	lr: 1.332e-03, eta: 1 day, 8:10:29, time: 1.371, data_time: 0.013, memory: 18885, decode.loss_seg: 0.1239, decode.acc_seg: 90.6210, aux.loss_seg: 0.0635, aux.acc_seg: 89.8000, loss: 0.1874
2021-08-28 15:48:04,418 - mmseg - INFO - Iter [72150/80000]	lr: 1.325e-03, eta: 22:14:55, time: 1.197, data_time: 0.009, memory: 18885, decode.loss_seg: 0.1103, decode.acc_seg: 90.1733, aux.loss_seg: 0.0551, aux.acc_seg: 89.4853, loss: 0.1654
2021-08-28 15:49:05,482 - mmseg - INFO - Iter [72200/80000]	lr: 1.318e-03, eta: 17:16:01, time: 1.223, data_time: 0.010, memory: 18885, decode.loss_seg: 0.1143, decode.acc_seg: 89.8618, aux.loss_seg: 0.0592, aux.acc_seg: 89.0775, loss: 0.1735
2021-08-28 15:50:17,288 - mmseg - INFO - Iter [72250/80000]	lr: 1.311e-03, eta: 14:21:16, time: 1.436, data_time: 0.005, memory: 18885, decode.loss_seg: 0.1142, decode.acc_seg: 91.5285, aux.loss_seg: 0.0578, aux.acc_seg: 90.7538, loss: 0.1720
2021-08-28 15:51:15,191 - mmseg - INFO - Iter [72300/80000]	lr: 1.304e-03, eta: 12:18:14, time: 1.157, data_time: 0.014, memory: 18885, decode.loss_seg: 0.1206, decode.acc_seg: 89.6202, aux.loss_seg: 0.0615, aux.acc_seg: 88.8183, loss: 0.1822
2021-08-28 15:52:14,979 - mmseg - INFO - Iter [72350/80000]	lr: 1.297e-03, eta: 10:50:41, time: 1.197, data_time: 0.012, memory: 18885, decode.loss_seg: 0.1107, decode.acc_seg: 90.3650, aux.loss_seg: 0.0565, aux.acc_seg: 89.6555, loss: 0.1672
2021-08-28 15:53:17,309 - mmseg - INFO - Iter [72400/80000]	lr: 1.290e-03, eta: 9:45:30, time: 1.245, data_time: 0.027, memory: 18885, decode.loss_seg: 0.1039, decode.acc_seg: 90.9945, aux.loss_seg: 0.0515, aux.acc_seg: 90.4674, loss: 0.1554
2021-08-28 15:54:17,077 - mmseg - INFO - Iter [72450/80000]	lr: 1.283e-03, eta: 8:53:51, time: 1.196, data_time: 0.011, memory: 18885, decode.loss_seg: 0.1047, decode.acc_seg: 89.9836, aux.loss_seg: 0.0512, aux.acc_seg: 89.4610, loss: 0.1559
2021-08-28 15:55:13,612 - mmseg - INFO - Iter [72500/80000]	lr: 1.276e-03, eta: 8:11:29, time: 1.130, data_time: 0.010, memory: 18885, decode.loss_seg: 0.1186, decode.acc_seg: 89.9810, aux.loss_seg: 0.0609, aux.acc_seg: 89.2092, loss: 0.1795
2021-08-28 15:56:19,062 - mmseg - INFO - Iter [72550/80000]	lr: 1.269e-03, eta: 7:38:38, time: 1.308, data_time: 0.016, memory: 18885, decode.loss_seg: 0.1140, decode.acc_seg: 90.3700, aux.loss_seg: 0.0572, aux.acc_seg: 89.7219, loss: 0.1712
2021-08-28 15:57:16,190 - mmseg - INFO - Iter [72600/80000]	lr: 1.262e-03, eta: 7:09:25, time: 1.146, data_time: 0.010, memory: 18885, decode.loss_seg: 0.1058, decode.acc_seg: 90.4500, aux.loss_seg: 0.0527, aux.acc_seg: 89.8588, loss: 0.1585
2021-08-28 15:58:16,855 - mmseg - INFO - Iter [72650/80000]	lr: 1.255e-03, eta: 6:45:09, time: 1.212, data_time: 0.008, memory: 18885, decode.loss_seg: 0.1257, decode.acc_seg: 89.7402, aux.loss_seg: 0.0662, aux.acc_seg: 88.8709, loss: 0.1919
2021-08-28 15:59:39,036 - mmseg - INFO - Iter [72700/80000]	lr: 1.248e-03, eta: 6:27:56, time: 1.640, data_time: 0.009, memory: 18885, decode.loss_seg: 0.1215, decode.acc_seg: 89.7665, aux.loss_seg: 0.0622, aux.acc_seg: 88.9075, loss: 0.1837
2021-08-28 16:00:56,832 - mmseg - INFO - Iter [72750/80000]	lr: 1.241e-03, eta: 6:12:10, time: 1.560, data_time: 0.041, memory: 18885, decode.loss_seg: 0.1164, decode.acc_seg: 90.2784, aux.loss_seg: 0.0595, aux.acc_seg: 89.4583, loss: 0.1758
2021-08-28 16:01:58,305 - mmseg - INFO - Iter [72800/80000]	lr: 1.234e-03, eta: 5:55:44, time: 1.228, data_time: 0.007, memory: 18885, decode.loss_seg: 0.1113, decode.acc_seg: 89.9327, aux.loss_seg: 0.0581, aux.acc_seg: 89.1438, loss: 0.1695
2021-08-28 16:03:04,217 - mmseg - INFO - Iter [72850/80000]	lr: 1.227e-03, eta: 5:41:44, time: 1.317, data_time: 0.014, memory: 18885, decode.loss_seg: 0.1136, decode.acc_seg: 91.0733, aux.loss_seg: 0.0572, aux.acc_seg: 90.3717, loss: 0.1708
2021-08-28 16:04:06,573 - mmseg - INFO - Iter [72900/80000]	lr: 1.220e-03, eta: 5:28:42, time: 1.249, data_time: 0.009, memory: 18885, decode.loss_seg: 0.1121, decode.acc_seg: 89.5801, aux.loss_seg: 0.0581, aux.acc_seg: 88.7509, loss: 0.1701
2021-08-28 16:05:07,749 - mmseg - INFO - Iter [72950/80000]	lr: 1.212e-03, eta: 5:16:48, time: 1.225, data_time: 0.009, memory: 18885, decode.loss_seg: 0.1066, decode.acc_seg: 90.7978, aux.loss_seg: 0.0536, aux.acc_seg: 90.1121, loss: 0.1602
2021-08-28 16:06:12,489 - mmseg - INFO - Exp name: deeplabv3_r101-v1d-d8_512x1024_80k_cityscapes.py
2021-08-28 16:06:12,629 - mmseg - INFO - Iter [73000/80000]	lr: 1.205e-03, eta: 5:06:23, time: 1.294, data_time: 0.009, memory: 18885, decode.loss_seg: 0.1166, decode.acc_seg: 89.4650, aux.loss_seg: 0.0602, aux.acc_seg: 88.6893, loss: 0.1768
2021-08-28 16:07:07,359 - mmseg - INFO - Iter [73050/80000]	lr: 1.198e-03, eta: 4:55:46, time: 1.097, data_time: 0.013, memory: 18885, decode.loss_seg: 0.1099, decode.acc_seg: 90.0709, aux.loss_seg: 0.0579, aux.acc_seg: 89.1616, loss: 0.1679
2021-08-28 16:08:13,644 - mmseg - INFO - Iter [73100/80000]	lr: 1.191e-03, eta: 4:47:13, time: 1.325, data_time: 0.012, memory: 18885, decode.loss_seg: 0.1113, decode.acc_seg: 91.0877, aux.loss_seg: 0.0555, aux.acc_seg: 90.4193, loss: 0.1668
2021-08-28 16:09:15,214 - mmseg - INFO - Iter [73150/80000]	lr: 1.184e-03, eta: 4:38:49, time: 1.222, data_time: 0.024, memory: 18885, decode.loss_seg: 0.1117, decode.acc_seg: 90.0206, aux.loss_seg: 0.0590, aux.acc_seg: 89.1488, loss: 0.1707
2021-08-28 16:10:19,165 - mmseg - INFO - Iter [73200/80000]	lr: 1.177e-03, eta: 4:31:20, time: 1.288, data_time: 0.020, memory: 18885, decode.loss_seg: 0.1123, decode.acc_seg: 89.9424, aux.loss_seg: 0.0571, aux.acc_seg: 89.2648, loss: 0.1695
2021-08-28 16:11:16,953 - mmseg - INFO - Iter [73250/80000]	lr: 1.170e-03, eta: 4:23:44, time: 1.150, data_time: 0.009, memory: 18885, decode.loss_seg: 0.1080, decode.acc_seg: 90.4100, aux.loss_seg: 0.0550, aux.acc_seg: 89.7015, loss: 0.1630
2021-08-28 16:12:23,131 - mmseg - INFO - Iter [73300/80000]	lr: 1.163e-03, eta: 4:17:26, time: 1.331, data_time: 0.028, memory: 18885, decode.loss_seg: 0.1046, decode.acc_seg: 90.5102, aux.loss_seg: 0.0518, aux.acc_seg: 89.8518, loss: 0.1564
2021-08-28 16:13:39,234 - mmseg - INFO - Iter [73350/80000]	lr: 1.155e-03, eta: 4:12:18, time: 1.521, data_time: 0.010, memory: 18885, decode.loss_seg: 0.1124, decode.acc_seg: 90.6489, aux.loss_seg: 0.0584, aux.acc_seg: 89.9144, loss: 0.1708
2021-08-28 16:14:34,906 - mmseg - INFO - Iter [73400/80000]	lr: 1.148e-03, eta: 4:05:50, time: 1.114, data_time: 0.019, memory: 18885, decode.loss_seg: 0.1075, decode.acc_seg: 90.0918, aux.loss_seg: 0.0523, aux.acc_seg: 89.5670, loss: 0.1598
2021-08-28 16:15:52,876 - mmseg - INFO - Iter [73450/80000]	lr: 1.141e-03, eta: 4:01:26, time: 1.557, data_time: 0.008, memory: 18885, decode.loss_seg: 0.1161, decode.acc_seg: 89.8710, aux.loss_seg: 0.0581, aux.acc_seg: 89.2574, loss: 0.1742
2021-08-28 16:17:03,435 - mmseg - INFO - Iter [73500/80000]	lr: 1.134e-03, eta: 3:56:42, time: 1.412, data_time: 0.036, memory: 18885, decode.loss_seg: 0.1058, decode.acc_seg: 90.3713, aux.loss_seg: 0.0533, aux.acc_seg: 89.7429, loss: 0.1591
2021-08-28 16:18:15,860 - mmseg - INFO - Iter [73550/80000]	lr: 1.127e-03, eta: 3:52:19, time: 1.448, data_time: 0.009, memory: 18885, decode.loss_seg: 0.1095, decode.acc_seg: 90.2867, aux.loss_seg: 0.0555, aux.acc_seg: 89.5890, loss: 0.1650
2021-08-28 16:19:29,379 - mmseg - INFO - Iter [73600/80000]	lr: 1.120e-03, eta: 3:48:13, time: 1.471, data_time: 0.012, memory: 18885, decode.loss_seg: 0.1096, decode.acc_seg: 90.5696, aux.loss_seg: 0.0548, aux.acc_seg: 89.9216, loss: 0.1644
2021-08-28 16:20:41,761 - mmseg - INFO - Iter [73650/80000]	lr: 1.113e-03, eta: 3:44:13, time: 1.445, data_time: 0.019, memory: 18885, decode.loss_seg: 0.1034, decode.acc_seg: 90.8835, aux.loss_seg: 0.0528, aux.acc_seg: 90.2052, loss: 0.1562
2021-08-28 16:21:48,290 - mmseg - INFO - Iter [73700/80000]	lr: 1.105e-03, eta: 3:40:02, time: 1.333, data_time: 0.013, memory: 18885, decode.loss_seg: 0.1108, decode.acc_seg: 90.5552, aux.loss_seg: 0.0548, aux.acc_seg: 89.9314, loss: 0.1657
2021-08-28 16:22:50,587 - mmseg - INFO - Iter [73750/80000]	lr: 1.098e-03, eta: 3:35:45, time: 1.245, data_time: 0.008, memory: 18885, decode.loss_seg: 0.1023, decode.acc_seg: 90.8054, aux.loss_seg: 0.0515, aux.acc_seg: 90.1325, loss: 0.1538
2021-08-28 16:24:03,491 - mmseg - INFO - Iter [73800/80000]	lr: 1.091e-03, eta: 3:32:16, time: 1.457, data_time: 0.007, memory: 18885, decode.loss_seg: 0.1083, decode.acc_seg: 90.0397, aux.loss_seg: 0.0540, aux.acc_seg: 89.4118, loss: 0.1623
2021-08-28 16:25:24,239 - mmseg - INFO - Iter [73850/80000]	lr: 1.084e-03, eta: 3:29:20, time: 1.616, data_time: 0.031, memory: 18885, decode.loss_seg: 0.1053, decode.acc_seg: 90.1496, aux.loss_seg: 0.0521, aux.acc_seg: 89.5787, loss: 0.1574
2021-08-28 16:26:45,038 - mmseg - INFO - Iter [73900/80000]	lr: 1.077e-03, eta: 3:26:30, time: 1.616, data_time: 0.049, memory: 18885, decode.loss_seg: 0.1040, decode.acc_seg: 91.3076, aux.loss_seg: 0.0546, aux.acc_seg: 90.4841, loss: 0.1587
2021-08-28 16:27:58,233 - mmseg - INFO - Iter [73950/80000]	lr: 1.069e-03, eta: 3:23:20, time: 1.462, data_time: 0.019, memory: 18885, decode.loss_seg: 0.1097, decode.acc_seg: 90.4331, aux.loss_seg: 0.0546, aux.acc_seg: 89.8087, loss: 0.1643
2021-08-28 16:29:01,692 - mmseg - INFO - Exp name: deeplabv3_r101-v1d-d8_512x1024_80k_cityscapes.py
2021-08-28 16:29:01,709 - mmseg - INFO - Iter [74000/80000]	lr: 1.062e-03, eta: 3:19:47, time: 1.271, data_time: 0.012, memory: 18885, decode.loss_seg: 0.1059, decode.acc_seg: 89.8500, aux.loss_seg: 0.0554, aux.acc_seg: 88.9766, loss: 0.1613
2021-08-28 16:30:20,815 - mmseg - INFO - Iter [74050/80000]	lr: 1.055e-03, eta: 3:17:07, time: 1.582, data_time: 0.006, memory: 18885, decode.loss_seg: 0.1160, decode.acc_seg: 90.1349, aux.loss_seg: 0.0586, aux.acc_seg: 89.3975, loss: 0.1745
2021-08-28 16:31:26,499 - mmseg - INFO - Iter [74100/80000]	lr: 1.048e-03, eta: 3:13:53, time: 1.312, data_time: 0.006, memory: 18885, decode.loss_seg: 0.1045, decode.acc_seg: 91.4487, aux.loss_seg: 0.0521, aux.acc_seg: 90.8562, loss: 0.1566
2021-08-28 16:32:34,166 - mmseg - INFO - Iter [74150/80000]	lr: 1.041e-03, eta: 3:10:50, time: 1.351, data_time: 0.011, memory: 18885, decode.loss_seg: 0.1121, decode.acc_seg: 90.3489, aux.loss_seg: 0.0562, aux.acc_seg: 89.6166, loss: 0.1683
2021-08-28 16:33:33,286 - mmseg - INFO - Iter [74200/80000]	lr: 1.033e-03, eta: 3:07:30, time: 1.186, data_time: 0.011, memory: 18885, decode.loss_seg: 0.1104, decode.acc_seg: 89.9140, aux.loss_seg: 0.0549, aux.acc_seg: 89.2288, loss: 0.1654
2021-08-28 16:34:36,575 - mmseg - INFO - Iter [74250/80000]	lr: 1.026e-03, eta: 3:04:27, time: 1.266, data_time: 0.018, memory: 18885, decode.loss_seg: 0.1018, decode.acc_seg: 90.6013, aux.loss_seg: 0.0513, aux.acc_seg: 89.9799, loss: 0.1531
2021-08-28 16:35:33,802 - mmseg - INFO - Iter [74300/80000]	lr: 1.019e-03, eta: 3:01:14, time: 1.144, data_time: 0.010, memory: 18885, decode.loss_seg: 0.1082, decode.acc_seg: 91.1324, aux.loss_seg: 0.0532, aux.acc_seg: 90.5673, loss: 0.1614
2021-08-28 16:36:30,307 - mmseg - INFO - Iter [74350/80000]	lr: 1.012e-03, eta: 2:58:06, time: 1.132, data_time: 0.011, memory: 18885, decode.loss_seg: 0.1137, decode.acc_seg: 89.2395, aux.loss_seg: 0.0569, aux.acc_seg: 88.5773, loss: 0.1706
2021-08-28 16:37:40,523 - mmseg - INFO - Iter [74400/80000]	lr: 1.004e-03, eta: 2:55:34, time: 1.404, data_time: 0.008, memory: 18885, decode.loss_seg: 0.1090, decode.acc_seg: 90.5620, aux.loss_seg: 0.0538, aux.acc_seg: 89.9823, loss: 0.1628
2021-08-28 16:38:42,698 - mmseg - INFO - Iter [74450/80000]	lr: 9.970e-04, eta: 2:52:48, time: 1.243, data_time: 0.008, memory: 18885, decode.loss_seg: 0.1104, decode.acc_seg: 89.6382, aux.loss_seg: 0.0549, aux.acc_seg: 89.0141, loss: 0.1653
2021-08-28 16:39:59,871 - mmseg - INFO - Iter [74500/80000]	lr: 9.897e-04, eta: 2:50:37, time: 1.532, data_time: 0.010, memory: 18885, decode.loss_seg: 0.1030, decode.acc_seg: 90.9595, aux.loss_seg: 0.0523, aux.acc_seg: 90.2839, loss: 0.1553
2021-08-28 16:41:09,779 - mmseg - INFO - Iter [74550/80000]	lr: 9.824e-04, eta: 2:48:16, time: 1.409, data_time: 0.027, memory: 18885, decode.loss_seg: 0.1090, decode.acc_seg: 89.5268, aux.loss_seg: 0.0540, aux.acc_seg: 88.9013, loss: 0.1630
2021-08-28 16:42:15,370 - mmseg - INFO - Iter [74600/80000]	lr: 9.751e-04, eta: 2:45:47, time: 1.311, data_time: 0.011, memory: 18885, decode.loss_seg: 0.1054, decode.acc_seg: 90.9321, aux.loss_seg: 0.0509, aux.acc_seg: 90.4655, loss: 0.1563
2021-08-28 16:43:16,075 - mmseg - INFO - Iter [74650/80000]	lr: 9.679e-04, eta: 2:43:11, time: 1.211, data_time: 0.041, memory: 18885, decode.loss_seg: 0.1097, decode.acc_seg: 90.9729, aux.loss_seg: 0.0538, aux.acc_seg: 90.4320, loss: 0.1636
2021-08-28 16:44:18,585 - mmseg - INFO - Iter [74700/80000]	lr: 9.606e-04, eta: 2:40:43, time: 1.254, data_time: 0.016, memory: 18885, decode.loss_seg: 0.0992, decode.acc_seg: 89.7151, aux.loss_seg: 0.0483, aux.acc_seg: 89.2412, loss: 0.1475
2021-08-28 16:45:26,891 - mmseg - INFO - Iter [74750/80000]	lr: 9.532e-04, eta: 2:38:29, time: 1.365, data_time: 0.011, memory: 18885, decode.loss_seg: 0.1094, decode.acc_seg: 90.3249, aux.loss_seg: 0.0540, aux.acc_seg: 89.7680, loss: 0.1634
2021-08-28 16:46:25,665 - mmseg - INFO - Iter [74800/80000]	lr: 9.459e-04, eta: 2:35:59, time: 1.175, data_time: 0.010, memory: 18885, decode.loss_seg: 0.1023, decode.acc_seg: 90.6396, aux.loss_seg: 0.0527, aux.acc_seg: 89.9191, loss: 0.1550
2021-08-28 16:47:22,814 - mmseg - INFO - Iter [74850/80000]	lr: 9.386e-04, eta: 2:33:30, time: 1.142, data_time: 0.010, memory: 18885, decode.loss_seg: 0.1050, decode.acc_seg: 89.7863, aux.loss_seg: 0.0538, aux.acc_seg: 89.0563, loss: 0.1588
2021-08-28 16:48:37,185 - mmseg - INFO - Iter [74900/80000]	lr: 9.313e-04, eta: 2:31:34, time: 1.488, data_time: 0.082, memory: 18885, decode.loss_seg: 0.1031, decode.acc_seg: 89.6537, aux.loss_seg: 0.0510, aux.acc_seg: 89.0985, loss: 0.1540
2021-08-28 16:49:44,357 - mmseg - INFO - Iter [74950/80000]	lr: 9.239e-04, eta: 2:29:27, time: 1.341, data_time: 0.008, memory: 18885, decode.loss_seg: 0.1029, decode.acc_seg: 91.2907, aux.loss_seg: 0.0516, aux.acc_seg: 90.6633, loss: 0.1545
2021-08-28 16:50:51,068 - mmseg - INFO - Exp name: deeplabv3_r101-v1d-d8_512x1024_80k_cityscapes.py
2021-08-28 16:50:51,071 - mmseg - INFO - Iter [75000/80000]	lr: 9.166e-04, eta: 2:27:22, time: 1.339, data_time: 0.026, memory: 18885, decode.loss_seg: 0.1076, decode.acc_seg: 90.2633, aux.loss_seg: 0.0544, aux.acc_seg: 89.6020, loss: 0.1620
2021-08-28 16:52:02,007 - mmseg - INFO - Iter [75050/80000]	lr: 9.092e-04, eta: 2:25:25, time: 1.416, data_time: 0.009, memory: 18885, decode.loss_seg: 0.1076, decode.acc_seg: 90.8270, aux.loss_seg: 0.0528, aux.acc_seg: 90.2378, loss: 0.1604
2021-08-28 16:53:23,107 - mmseg - INFO - Iter [75100/80000]	lr: 9.019e-04, eta: 2:23:46, time: 1.623, data_time: 0.011, memory: 18885, decode.loss_seg: 0.1022, decode.acc_seg: 90.9238, aux.loss_seg: 0.0520, aux.acc_seg: 90.2428, loss: 0.1542
2021-08-28 16:54:39,542 - mmseg - INFO - Iter [75150/80000]	lr: 8.945e-04, eta: 2:21:58, time: 1.504, data_time: 0.016, memory: 18885, decode.loss_seg: 0.1044, decode.acc_seg: 90.4418, aux.loss_seg: 0.0515, aux.acc_seg: 89.8626, loss: 0.1559
2021-08-28 16:55:51,485 - mmseg - INFO - Iter [75200/80000]	lr: 8.871e-04, eta: 2:20:08, time: 1.462, data_time: 0.036, memory: 18885, decode.loss_seg: 0.1024, decode.acc_seg: 90.1466, aux.loss_seg: 0.0515, aux.acc_seg: 89.5319, loss: 0.1539
2021-08-28 16:57:19,939 - mmseg - INFO - Iter [75250/80000]	lr: 8.798e-04, eta: 2:18:41, time: 1.761, data_time: 0.018, memory: 18885, decode.loss_seg: 0.1051, decode.acc_seg: 90.0249, aux.loss_seg: 0.0512, aux.acc_seg: 89.4662, loss: 0.1564
2021-08-28 16:58:16,631 - mmseg - INFO - Iter [75300/80000]	lr: 8.724e-04, eta: 2:16:30, time: 1.145, data_time: 0.018, memory: 18885, decode.loss_seg: 0.1107, decode.acc_seg: 90.1994, aux.loss_seg: 0.0543, aux.acc_seg: 89.6199, loss: 0.1650
2021-08-28 16:59:18,825 - mmseg - INFO - Iter [75350/80000]	lr: 8.650e-04, eta: 2:14:28, time: 1.233, data_time: 0.031, memory: 18885, decode.loss_seg: 0.1023, decode.acc_seg: 90.8130, aux.loss_seg: 0.0515, aux.acc_seg: 90.1499, loss: 0.1538
2021-08-28 17:00:35,543 - mmseg - INFO - Iter [75400/80000]	lr: 8.576e-04, eta: 2:12:48, time: 1.543, data_time: 0.024, memory: 18885, decode.loss_seg: 0.1036, decode.acc_seg: 91.3996, aux.loss_seg: 0.0504, aux.acc_seg: 90.9115, loss: 0.1540
2021-08-28 17:01:46,644 - mmseg - INFO - Iter [75450/80000]	lr: 8.502e-04, eta: 2:11:01, time: 1.421, data_time: 0.017, memory: 18885, decode.loss_seg: 0.1060, decode.acc_seg: 90.6544, aux.loss_seg: 0.0526, aux.acc_seg: 90.0043, loss: 0.1586
2021-08-28 17:02:56,269 - mmseg - INFO - Iter [75500/80000]	lr: 8.427e-04, eta: 2:09:13, time: 1.393, data_time: 0.011, memory: 18885, decode.loss_seg: 0.1112, decode.acc_seg: 89.8126, aux.loss_seg: 0.0588, aux.acc_seg: 89.0015, loss: 0.1701
2021-08-28 17:04:06,106 - mmseg - INFO - Iter [75550/80000]	lr: 8.353e-04, eta: 2:07:27, time: 1.396, data_time: 0.014, memory: 18885, decode.loss_seg: 0.1058, decode.acc_seg: 90.0173, aux.loss_seg: 0.0534, aux.acc_seg: 89.3755, loss: 0.1592
2021-08-28 17:05:20,534 - mmseg - INFO - Iter [75600/80000]	lr: 8.279e-04, eta: 2:05:47, time: 1.489, data_time: 0.010, memory: 18885, decode.loss_seg: 0.1026, decode.acc_seg: 91.0828, aux.loss_seg: 0.0505, aux.acc_seg: 90.5593, loss: 0.1532
2021-08-28 17:06:27,982 - mmseg - INFO - Iter [75650/80000]	lr: 8.204e-04, eta: 2:03:59, time: 1.351, data_time: 0.009, memory: 18885, decode.loss_seg: 0.1060, decode.acc_seg: 89.9199, aux.loss_seg: 0.0531, aux.acc_seg: 89.3059, loss: 0.1590
2021-08-28 17:07:35,155 - mmseg - INFO - Iter [75700/80000]	lr: 8.130e-04, eta: 2:02:12, time: 1.342, data_time: 0.010, memory: 18885, decode.loss_seg: 0.1025, decode.acc_seg: 91.3631, aux.loss_seg: 0.0525, aux.acc_seg: 90.7519, loss: 0.1550
2021-08-28 17:08:44,154 - mmseg - INFO - Iter [75750/80000]	lr: 8.055e-04, eta: 2:00:28, time: 1.380, data_time: 0.033, memory: 18885, decode.loss_seg: 0.1061, decode.acc_seg: 90.6009, aux.loss_seg: 0.0540, aux.acc_seg: 89.8677, loss: 0.1601
2021-08-28 17:09:44,948 - mmseg - INFO - Iter [75800/80000]	lr: 7.980e-04, eta: 1:58:37, time: 1.216, data_time: 0.010, memory: 18885, decode.loss_seg: 0.1019, decode.acc_seg: 90.3779, aux.loss_seg: 0.0493, aux.acc_seg: 89.8801, loss: 0.1512
2021-08-28 17:10:52,084 - mmseg - INFO - Iter [75850/80000]	lr: 7.905e-04, eta: 1:56:53, time: 1.342, data_time: 0.009, memory: 18885, decode.loss_seg: 0.1022, decode.acc_seg: 91.1690, aux.loss_seg: 0.0515, aux.acc_seg: 90.5605, loss: 0.1537
2021-08-28 17:11:56,916 - mmseg - INFO - Iter [75900/80000]	lr: 7.831e-04, eta: 1:55:08, time: 1.295, data_time: 0.015, memory: 18885, decode.loss_seg: 0.1097, decode.acc_seg: 90.6212, aux.loss_seg: 0.0542, aux.acc_seg: 90.0141, loss: 0.1638
2021-08-28 17:13:04,352 - mmseg - INFO - Iter [75950/80000]	lr: 7.756e-04, eta: 1:53:26, time: 1.352, data_time: 0.012, memory: 18885, decode.loss_seg: 0.1113, decode.acc_seg: 89.2388, aux.loss_seg: 0.0550, aux.acc_seg: 88.5997, loss: 0.1663
2021-08-28 17:14:30,757 - mmseg - INFO - Exp name: deeplabv3_r101-v1d-d8_512x1024_80k_cityscapes.py
2021-08-28 17:14:30,806 - mmseg - INFO - Iter [76000/80000]	lr: 7.680e-04, eta: 1:52:05, time: 1.728, data_time: 0.009, memory: 18885, decode.loss_seg: 0.0997, decode.acc_seg: 91.4151, aux.loss_seg: 0.0493, aux.acc_seg: 90.8466, loss: 0.1490
2021-08-28 17:15:56,781 - mmseg - INFO - Iter [76050/80000]	lr: 7.605e-04, eta: 1:50:42, time: 1.719, data_time: 0.007, memory: 18885, decode.loss_seg: 0.0971, decode.acc_seg: 90.1924, aux.loss_seg: 0.0486, aux.acc_seg: 89.6780, loss: 0.1457
2021-08-28 17:17:04,684 - mmseg - INFO - Iter [76100/80000]	lr: 7.530e-04, eta: 1:49:03, time: 1.351, data_time: 0.021, memory: 18885, decode.loss_seg: 0.1048, decode.acc_seg: 90.8722, aux.loss_seg: 0.0520, aux.acc_seg: 90.2782, loss: 0.1568
2021-08-28 17:18:15,948 - mmseg - INFO - Iter [76150/80000]	lr: 7.455e-04, eta: 1:47:27, time: 1.431, data_time: 0.019, memory: 18885, decode.loss_seg: 0.0984, decode.acc_seg: 91.0264, aux.loss_seg: 0.0489, aux.acc_seg: 90.4961, loss: 0.1473
2021-08-28 17:19:41,075 - mmseg - INFO - Iter [76200/80000]	lr: 7.379e-04, eta: 1:46:05, time: 1.700, data_time: 0.011, memory: 18885, decode.loss_seg: 0.1075, decode.acc_seg: 90.0012, aux.loss_seg: 0.0518, aux.acc_seg: 89.4824, loss: 0.1594
2021-08-28 17:20:56,268 - mmseg - INFO - Iter [76250/80000]	lr: 7.304e-04, eta: 1:44:34, time: 1.508, data_time: 0.015, memory: 18885, decode.loss_seg: 0.1000, decode.acc_seg: 91.4021, aux.loss_seg: 0.0497, aux.acc_seg: 90.7865, loss: 0.1497
2021-08-28 17:22:01,418 - mmseg - INFO - Iter [76300/80000]	lr: 7.228e-04, eta: 1:42:54, time: 1.302, data_time: 0.014, memory: 18885, decode.loss_seg: 0.1005, decode.acc_seg: 89.9422, aux.loss_seg: 0.0498, aux.acc_seg: 89.3571, loss: 0.1502
2021-08-28 17:23:06,082 - mmseg - INFO - Iter [76350/80000]	lr: 7.152e-04, eta: 1:41:15, time: 1.287, data_time: 0.018, memory: 18885, decode.loss_seg: 0.1025, decode.acc_seg: 90.0692, aux.loss_seg: 0.0512, aux.acc_seg: 89.4372, loss: 0.1537
2021-08-28 17:24:07,070 - mmseg - INFO - Iter [76400/80000]	lr: 7.076e-04, eta: 1:39:33, time: 1.224, data_time: 0.015, memory: 18885, decode.loss_seg: 0.1035, decode.acc_seg: 90.4859, aux.loss_seg: 0.0513, aux.acc_seg: 89.8093, loss: 0.1548
2021-08-28 17:25:01,197 - mmseg - INFO - Iter [76450/80000]	lr: 7.000e-04, eta: 1:37:47, time: 1.083, data_time: 0.013, memory: 18885, decode.loss_seg: 0.1016, decode.acc_seg: 90.5810, aux.loss_seg: 0.0498, aux.acc_seg: 90.1166, loss: 0.1514
2021-08-28 17:26:00,604 - mmseg - INFO - Iter [76500/80000]	lr: 6.924e-04, eta: 1:36:07, time: 1.189, data_time: 0.047, memory: 18885, decode.loss_seg: 0.1048, decode.acc_seg: 89.1198, aux.loss_seg: 0.0509, aux.acc_seg: 88.6146, loss: 0.1557
2021-08-28 17:27:12,893 - mmseg - INFO - Iter [76550/80000]	lr: 6.848e-04, eta: 1:34:37, time: 1.444, data_time: 0.011, memory: 18885, decode.loss_seg: 0.1007, decode.acc_seg: 90.7855, aux.loss_seg: 0.0484, aux.acc_seg: 90.3355, loss: 0.1491
2021-08-28 17:28:25,262 - mmseg - INFO - Iter [76600/80000]	lr: 6.772e-04, eta: 1:33:07, time: 1.449, data_time: 0.021, memory: 18885, decode.loss_seg: 0.1134, decode.acc_seg: 89.9840, aux.loss_seg: 0.0566, aux.acc_seg: 89.3248, loss: 0.1700
2021-08-28 17:29:41,070 - mmseg - INFO - Iter [76650/80000]	lr: 6.695e-04, eta: 1:31:40, time: 1.516, data_time: 0.049, memory: 18885, decode.loss_seg: 0.1090, decode.acc_seg: 90.3851, aux.loss_seg: 0.0536, aux.acc_seg: 89.7686, loss: 0.1626
2021-08-28 17:30:53,051 - mmseg - INFO - Iter [76700/80000]	lr: 6.619e-04, eta: 1:30:11, time: 1.439, data_time: 0.011, memory: 18885, decode.loss_seg: 0.1000, decode.acc_seg: 90.9659, aux.loss_seg: 0.0509, aux.acc_seg: 90.2634, loss: 0.1509
2021-08-28 17:31:53,417 - mmseg - INFO - Iter [76750/80000]	lr: 6.542e-04, eta: 1:28:34, time: 1.205, data_time: 0.008, memory: 18885, decode.loss_seg: 0.1015, decode.acc_seg: 89.0947, aux.loss_seg: 0.0490, aux.acc_seg: 88.5665, loss: 0.1505
2021-08-28 17:32:46,875 - mmseg - INFO - Iter [76800/80000]	lr: 6.465e-04, eta: 1:26:54, time: 1.072, data_time: 0.010, memory: 18885, decode.loss_seg: 0.1039, decode.acc_seg: 90.7849, aux.loss_seg: 0.0513, aux.acc_seg: 90.2612, loss: 0.1552
2021-08-28 17:33:49,560 - mmseg - INFO - Iter [76850/80000]	lr: 6.388e-04, eta: 1:25:20, time: 1.251, data_time: 0.028, memory: 18885, decode.loss_seg: 0.0990, decode.acc_seg: 90.8360, aux.loss_seg: 0.0491, aux.acc_seg: 90.2910, loss: 0.1480
2021-08-28 17:35:08,417 - mmseg - INFO - Iter [76900/80000]	lr: 6.311e-04, eta: 1:23:57, time: 1.577, data_time: 0.125, memory: 18885, decode.loss_seg: 0.1019, decode.acc_seg: 90.8980, aux.loss_seg: 0.0504, aux.acc_seg: 90.3000, loss: 0.1523
2021-08-28 17:36:08,355 - mmseg - INFO - Iter [76950/80000]	lr: 6.234e-04, eta: 1:22:23, time: 1.201, data_time: 0.011, memory: 18885, decode.loss_seg: 0.1057, decode.acc_seg: 90.3457, aux.loss_seg: 0.0526, aux.acc_seg: 89.7505, loss: 0.1583
2021-08-28 17:37:07,669 - mmseg - INFO - Exp name: deeplabv3_r101-v1d-d8_512x1024_80k_cityscapes.py
2021-08-28 17:37:07,692 - mmseg - INFO - Iter [77000/80000]	lr: 6.157e-04, eta: 1:20:49, time: 1.186, data_time: 0.012, memory: 18885, decode.loss_seg: 0.1029, decode.acc_seg: 91.2632, aux.loss_seg: 0.0500, aux.acc_seg: 90.7635, loss: 0.1529
2021-08-28 17:38:09,972 - mmseg - INFO - Iter [77050/80000]	lr: 6.080e-04, eta: 1:19:17, time: 1.246, data_time: 0.009, memory: 18885, decode.loss_seg: 0.1024, decode.acc_seg: 91.4175, aux.loss_seg: 0.0507, aux.acc_seg: 90.8976, loss: 0.1530
2021-08-28 17:39:19,970 - mmseg - INFO - Iter [77100/80000]	lr: 6.002e-04, eta: 1:17:50, time: 1.399, data_time: 0.008, memory: 18885, decode.loss_seg: 0.1000, decode.acc_seg: 89.3370, aux.loss_seg: 0.0500, aux.acc_seg: 88.7606, loss: 0.1501
2021-08-28 17:40:21,438 - mmseg - INFO - Iter [77150/80000]	lr: 5.924e-04, eta: 1:16:19, time: 1.226, data_time: 0.015, memory: 18885, decode.loss_seg: 0.1043, decode.acc_seg: 91.1409, aux.loss_seg: 0.0506, aux.acc_seg: 90.6522, loss: 0.1549
2021-08-28 17:41:34,106 - mmseg - INFO - Iter [77200/80000]	lr: 5.847e-04, eta: 1:14:55, time: 1.451, data_time: 0.016, memory: 18885, decode.loss_seg: 0.1036, decode.acc_seg: 90.3034, aux.loss_seg: 0.0509, aux.acc_seg: 89.7144, loss: 0.1545
2021-08-28 17:42:46,822 - mmseg - INFO - Iter [77250/80000]	lr: 5.769e-04, eta: 1:13:31, time: 1.461, data_time: 0.058, memory: 18885, decode.loss_seg: 0.1045, decode.acc_seg: 90.7071, aux.loss_seg: 0.0511, aux.acc_seg: 90.1825, loss: 0.1555
2021-08-28 17:43:48,101 - mmseg - INFO - Iter [77300/80000]	lr: 5.691e-04, eta: 1:12:01, time: 1.223, data_time: 0.020, memory: 18885, decode.loss_seg: 0.0998, decode.acc_seg: 89.8263, aux.loss_seg: 0.0488, aux.acc_seg: 89.3146, loss: 0.1486
2021-08-28 17:44:58,982 - mmseg - INFO - Iter [77350/80000]	lr: 5.612e-04, eta: 1:10:36, time: 1.418, data_time: 0.014, memory: 18885, decode.loss_seg: 0.1046, decode.acc_seg: 90.7011, aux.loss_seg: 0.0513, aux.acc_seg: 90.1738, loss: 0.1560
2021-08-28 17:46:07,982 - mmseg - INFO - Iter [77400/80000]	lr: 5.534e-04, eta: 1:09:11, time: 1.382, data_time: 0.012, memory: 18885, decode.loss_seg: 0.0999, decode.acc_seg: 91.2842, aux.loss_seg: 0.0487, aux.acc_seg: 90.7701, loss: 0.1485
2021-08-28 17:47:19,499 - mmseg - INFO - Iter [77450/80000]	lr: 5.455e-04, eta: 1:07:47, time: 1.429, data_time: 0.012, memory: 18885, decode.loss_seg: 0.1071, decode.acc_seg: 91.4253, aux.loss_seg: 0.0522, aux.acc_seg: 90.8876, loss: 0.1593
2021-08-28 17:48:18,521 - mmseg - INFO - Iter [77500/80000]	lr: 5.377e-04, eta: 1:06:18, time: 1.182, data_time: 0.010, memory: 18885, decode.loss_seg: 0.0995, decode.acc_seg: 90.7761, aux.loss_seg: 0.0510, aux.acc_seg: 90.1010, loss: 0.1505
2021-08-28 17:49:28,587 - mmseg - INFO - Iter [77550/80000]	lr: 5.298e-04, eta: 1:04:54, time: 1.401, data_time: 0.007, memory: 18885, decode.loss_seg: 0.1035, decode.acc_seg: 89.7076, aux.loss_seg: 0.0515, aux.acc_seg: 89.1487, loss: 0.1550
2021-08-28 17:50:32,782 - mmseg - INFO - Iter [77600/80000]	lr: 5.219e-04, eta: 1:03:28, time: 1.280, data_time: 0.023, memory: 18885, decode.loss_seg: 0.1033, decode.acc_seg: 91.1573, aux.loss_seg: 0.0504, aux.acc_seg: 90.5907, loss: 0.1537
2021-08-28 17:51:33,306 - mmseg - INFO - Iter [77650/80000]	lr: 5.140e-04, eta: 1:02:01, time: 1.209, data_time: 0.010, memory: 18885, decode.loss_seg: 0.0958, decode.acc_seg: 90.6874, aux.loss_seg: 0.0471, aux.acc_seg: 90.1859, loss: 0.1429
2021-08-28 17:52:42,284 - mmseg - INFO - Iter [77700/80000]	lr: 5.060e-04, eta: 1:00:38, time: 1.382, data_time: 0.010, memory: 18885, decode.loss_seg: 0.1042, decode.acc_seg: 91.1605, aux.loss_seg: 0.0521, aux.acc_seg: 90.5423, loss: 0.1563
2021-08-28 17:53:42,491 - mmseg - INFO - Iter [77750/80000]	lr: 4.981e-04, eta: 0:59:11, time: 1.204, data_time: 0.009, memory: 18885, decode.loss_seg: 0.1040, decode.acc_seg: 91.0504, aux.loss_seg: 0.0524, aux.acc_seg: 90.3628, loss: 0.1563
2021-08-28 17:54:54,563 - mmseg - INFO - Iter [77800/80000]	lr: 4.901e-04, eta: 0:57:50, time: 1.438, data_time: 0.012, memory: 18885, decode.loss_seg: 0.1007, decode.acc_seg: 90.5928, aux.loss_seg: 0.0500, aux.acc_seg: 89.9889, loss: 0.1507
2021-08-28 17:55:50,948 - mmseg - INFO - Iter [77850/80000]	lr: 4.821e-04, eta: 0:56:23, time: 1.132, data_time: 0.011, memory: 18885, decode.loss_seg: 0.1075, decode.acc_seg: 90.0791, aux.loss_seg: 0.0544, aux.acc_seg: 89.4258, loss: 0.1619
2021-08-28 17:56:50,417 - mmseg - INFO - Iter [77900/80000]	lr: 4.741e-04, eta: 0:54:57, time: 1.189, data_time: 0.010, memory: 18885, decode.loss_seg: 0.1043, decode.acc_seg: 89.9654, aux.loss_seg: 0.0522, aux.acc_seg: 89.4196, loss: 0.1565
2021-08-28 17:57:49,459 - mmseg - INFO - Iter [77950/80000]	lr: 4.661e-04, eta: 0:53:32, time: 1.180, data_time: 0.014, memory: 18885, decode.loss_seg: 0.1076, decode.acc_seg: 90.5792, aux.loss_seg: 0.0528, aux.acc_seg: 90.0778, loss: 0.1604
2021-08-28 17:58:45,930 - mmseg - INFO - Exp name: deeplabv3_r101-v1d-d8_512x1024_80k_cityscapes.py
2021-08-28 17:58:45,957 - mmseg - INFO - Iter [78000/80000]	lr: 4.581e-04, eta: 0:52:06, time: 1.130, data_time: 0.024, memory: 18885, decode.loss_seg: 0.1008, decode.acc_seg: 90.7143, aux.loss_seg: 0.0502, aux.acc_seg: 90.0970, loss: 0.1510
2021-08-28 17:59:48,869 - mmseg - INFO - Iter [78050/80000]	lr: 4.500e-04, eta: 0:50:43, time: 1.256, data_time: 0.022, memory: 18885, decode.loss_seg: 0.0981, decode.acc_seg: 90.2292, aux.loss_seg: 0.0484, aux.acc_seg: 89.7226, loss: 0.1465
2021-08-28 18:00:46,873 - mmseg - INFO - Iter [78100/80000]	lr: 4.419e-04, eta: 0:49:19, time: 1.161, data_time: 0.012, memory: 18885, decode.loss_seg: 0.1066, decode.acc_seg: 90.7063, aux.loss_seg: 0.0521, aux.acc_seg: 90.1555, loss: 0.1587
2021-08-28 18:01:44,539 - mmseg - INFO - Iter [78150/80000]	lr: 4.338e-04, eta: 0:47:55, time: 1.153, data_time: 0.010, memory: 18885, decode.loss_seg: 0.1027, decode.acc_seg: 90.4165, aux.loss_seg: 0.0510, aux.acc_seg: 89.8307, loss: 0.1537
2021-08-28 18:02:52,040 - mmseg - INFO - Iter [78200/80000]	lr: 4.257e-04, eta: 0:46:34, time: 1.352, data_time: 0.008, memory: 18885, decode.loss_seg: 0.0988, decode.acc_seg: 90.3624, aux.loss_seg: 0.0493, aux.acc_seg: 89.7579, loss: 0.1481
2021-08-28 18:03:46,283 - mmseg - INFO - Iter [78250/80000]	lr: 4.175e-04, eta: 0:45:10, time: 1.085, data_time: 0.007, memory: 18885, decode.loss_seg: 0.1008, decode.acc_seg: 90.0127, aux.loss_seg: 0.0487, aux.acc_seg: 89.5459, loss: 0.1496
2021-08-28 18:05:00,119 - mmseg - INFO - Iter [78300/80000]	lr: 4.094e-04, eta: 0:43:52, time: 1.476, data_time: 0.007, memory: 18885, decode.loss_seg: 0.0949, decode.acc_seg: 90.5982, aux.loss_seg: 0.0457, aux.acc_seg: 90.1650, loss: 0.1405
2021-08-28 18:06:02,540 - mmseg - INFO - Iter [78350/80000]	lr: 4.012e-04, eta: 0:42:30, time: 1.242, data_time: 0.035, memory: 18885, decode.loss_seg: 0.1050, decode.acc_seg: 90.3622, aux.loss_seg: 0.0520, aux.acc_seg: 89.7620, loss: 0.1570
2021-08-28 18:07:06,105 - mmseg - INFO - Iter [78400/80000]	lr: 3.930e-04, eta: 0:41:10, time: 1.277, data_time: 0.015, memory: 18885, decode.loss_seg: 0.1024, decode.acc_seg: 90.2176, aux.loss_seg: 0.0495, aux.acc_seg: 89.7672, loss: 0.1519
2021-08-28 18:08:07,453 - mmseg - INFO - Iter [78450/80000]	lr: 3.847e-04, eta: 0:39:49, time: 1.219, data_time: 0.011, memory: 18885, decode.loss_seg: 0.1044, decode.acc_seg: 91.6692, aux.loss_seg: 0.0517, aux.acc_seg: 91.0756, loss: 0.1562
2021-08-28 18:09:07,624 - mmseg - INFO - Iter [78500/80000]	lr: 3.764e-04, eta: 0:38:28, time: 1.209, data_time: 0.016, memory: 18885, decode.loss_seg: 0.0952, decode.acc_seg: 91.0097, aux.loss_seg: 0.0480, aux.acc_seg: 90.4150, loss: 0.1433
2021-08-28 18:10:01,871 - mmseg - INFO - Iter [78550/80000]	lr: 3.681e-04, eta: 0:37:06, time: 1.087, data_time: 0.011, memory: 18885, decode.loss_seg: 0.0961, decode.acc_seg: 90.4959, aux.loss_seg: 0.0478, aux.acc_seg: 89.9924, loss: 0.1439
2021-08-28 18:10:57,092 - mmseg - INFO - Iter [78600/80000]	lr: 3.598e-04, eta: 0:35:44, time: 1.104, data_time: 0.011, memory: 18885, decode.loss_seg: 0.1040, decode.acc_seg: 90.1372, aux.loss_seg: 0.0506, aux.acc_seg: 89.5781, loss: 0.1545
2021-08-28 18:12:07,231 - mmseg - INFO - Iter [78650/80000]	lr: 3.514e-04, eta: 0:34:26, time: 1.400, data_time: 0.010, memory: 18885, decode.loss_seg: 0.1035, decode.acc_seg: 89.6550, aux.loss_seg: 0.0509, aux.acc_seg: 89.1252, loss: 0.1544
2021-08-28 18:13:11,383 - mmseg - INFO - Iter [78700/80000]	lr: 3.431e-04, eta: 0:33:07, time: 1.280, data_time: 0.042, memory: 18885, decode.loss_seg: 0.0983, decode.acc_seg: 91.5726, aux.loss_seg: 0.0495, aux.acc_seg: 90.9165, loss: 0.1478
2021-08-28 18:14:17,982 - mmseg - INFO - Iter [78750/80000]	lr: 3.346e-04, eta: 0:31:49, time: 1.335, data_time: 0.014, memory: 18885, decode.loss_seg: 0.1005, decode.acc_seg: 90.0572, aux.loss_seg: 0.0493, aux.acc_seg: 89.5200, loss: 0.1498
2021-08-28 18:15:20,459 - mmseg - INFO - Iter [78800/80000]	lr: 3.262e-04, eta: 0:30:30, time: 1.250, data_time: 0.013, memory: 18885, decode.loss_seg: 0.1057, decode.acc_seg: 91.1295, aux.loss_seg: 0.0519, aux.acc_seg: 90.5829, loss: 0.1576
2021-08-28 18:16:24,384 - mmseg - INFO - Iter [78850/80000]	lr: 3.177e-04, eta: 0:29:12, time: 1.262, data_time: 0.009, memory: 18885, decode.loss_seg: 0.1028, decode.acc_seg: 90.9189, aux.loss_seg: 0.0519, aux.acc_seg: 90.3143, loss: 0.1547
2021-08-28 18:17:39,339 - mmseg - INFO - Iter [78900/80000]	lr: 3.092e-04, eta: 0:27:56, time: 1.516, data_time: 0.028, memory: 18885, decode.loss_seg: 0.1025, decode.acc_seg: 90.3012, aux.loss_seg: 0.0520, aux.acc_seg: 89.6307, loss: 0.1545
2021-08-28 18:18:47,238 - mmseg - INFO - Iter [78950/80000]	lr: 3.006e-04, eta: 0:26:38, time: 1.359, data_time: 0.012, memory: 18885, decode.loss_seg: 0.0976, decode.acc_seg: 91.3590, aux.loss_seg: 0.0482, aux.acc_seg: 90.8310, loss: 0.1458
2021-08-28 18:20:03,783 - mmseg - INFO - Exp name: deeplabv3_r101-v1d-d8_512x1024_80k_cityscapes.py
2021-08-28 18:20:03,882 - mmseg - INFO - Iter [79000/80000]	lr: 2.920e-04, eta: 0:25:22, time: 1.531, data_time: 0.013, memory: 18885, decode.loss_seg: 0.0997, decode.acc_seg: 89.8177, aux.loss_seg: 0.0507, aux.acc_seg: 89.1879, loss: 0.1504
2021-08-28 18:21:11,662 - mmseg - INFO - Iter [79050/80000]	lr: 2.833e-04, eta: 0:24:05, time: 1.354, data_time: 0.010, memory: 18885, decode.loss_seg: 0.0996, decode.acc_seg: 90.6525, aux.loss_seg: 0.0476, aux.acc_seg: 90.1977, loss: 0.1472
2021-08-28 18:22:20,807 - mmseg - INFO - Iter [79100/80000]	lr: 2.746e-04, eta: 0:22:48, time: 1.385, data_time: 0.025, memory: 18885, decode.loss_seg: 0.1010, decode.acc_seg: 90.8218, aux.loss_seg: 0.0496, aux.acc_seg: 90.3183, loss: 0.1506
2021-08-28 18:23:21,191 - mmseg - INFO - Iter [79150/80000]	lr: 2.659e-04, eta: 0:21:30, time: 1.207, data_time: 0.012, memory: 18885, decode.loss_seg: 0.0981, decode.acc_seg: 90.3015, aux.loss_seg: 0.0500, aux.acc_seg: 89.6808, loss: 0.1480
2021-08-28 18:24:17,431 - mmseg - INFO - Iter [79200/80000]	lr: 2.571e-04, eta: 0:20:12, time: 1.126, data_time: 0.012, memory: 18885, decode.loss_seg: 0.0994, decode.acc_seg: 89.9946, aux.loss_seg: 0.0498, aux.acc_seg: 89.3514, loss: 0.1492
2021-08-28 18:25:15,885 - mmseg - INFO - Iter [79250/80000]	lr: 2.482e-04, eta: 0:18:54, time: 1.168, data_time: 0.008, memory: 18885, decode.loss_seg: 0.0986, decode.acc_seg: 91.3202, aux.loss_seg: 0.0486, aux.acc_seg: 90.8076, loss: 0.1472
2021-08-28 18:26:16,580 - mmseg - INFO - Iter [79300/80000]	lr: 2.393e-04, eta: 0:17:37, time: 1.216, data_time: 0.045, memory: 18885, decode.loss_seg: 0.0983, decode.acc_seg: 91.0227, aux.loss_seg: 0.0468, aux.acc_seg: 90.6512, loss: 0.1450
2021-08-28 18:27:27,949 - mmseg - INFO - Iter [79350/80000]	lr: 2.303e-04, eta: 0:16:21, time: 1.422, data_time: 0.018, memory: 18885, decode.loss_seg: 0.0996, decode.acc_seg: 90.5065, aux.loss_seg: 0.0482, aux.acc_seg: 90.0480, loss: 0.1478
2021-08-28 18:28:24,824 - mmseg - INFO - Iter [79400/80000]	lr: 2.213e-04, eta: 0:15:04, time: 1.139, data_time: 0.013, memory: 18885, decode.loss_seg: 0.0999, decode.acc_seg: 91.3088, aux.loss_seg: 0.0496, aux.acc_seg: 90.7742, loss: 0.1495
2021-08-28 18:29:44,802 - mmseg - INFO - Iter [79450/80000]	lr: 2.122e-04, eta: 0:13:49, time: 1.597, data_time: 0.103, memory: 18885, decode.loss_seg: 0.1050, decode.acc_seg: 90.6286, aux.loss_seg: 0.0524, aux.acc_seg: 89.9984, loss: 0.1574
2021-08-28 18:31:04,243 - mmseg - INFO - Iter [79500/80000]	lr: 2.030e-04, eta: 0:12:34, time: 1.590, data_time: 0.017, memory: 18885, decode.loss_seg: 0.0985, decode.acc_seg: 91.0137, aux.loss_seg: 0.0490, aux.acc_seg: 90.5112, loss: 0.1475
2021-08-28 18:32:09,894 - mmseg - INFO - Iter [79550/80000]	lr: 1.937e-04, eta: 0:11:18, time: 1.316, data_time: 0.010, memory: 18885, decode.loss_seg: 0.0964, decode.acc_seg: 90.5346, aux.loss_seg: 0.0485, aux.acc_seg: 89.9617, loss: 0.1449
2021-08-28 18:33:09,049 - mmseg - INFO - Iter [79600/80000]	lr: 1.843e-04, eta: 0:10:02, time: 1.183, data_time: 0.009, memory: 18885, decode.loss_seg: 0.1021, decode.acc_seg: 90.5889, aux.loss_seg: 0.0499, aux.acc_seg: 90.0495, loss: 0.1521
2021-08-28 18:34:16,993 - mmseg - INFO - Iter [79650/80000]	lr: 1.748e-04, eta: 0:08:46, time: 1.352, data_time: 0.011, memory: 18885, decode.loss_seg: 0.0977, decode.acc_seg: 91.2851, aux.loss_seg: 0.0484, aux.acc_seg: 90.7657, loss: 0.1462
2021-08-28 18:35:25,316 - mmseg - INFO - Iter [79700/80000]	lr: 1.651e-04, eta: 0:07:31, time: 1.373, data_time: 0.020, memory: 18885, decode.loss_seg: 0.1036, decode.acc_seg: 91.2151, aux.loss_seg: 0.0507, aux.acc_seg: 90.6997, loss: 0.1543
2021-08-28 18:36:38,087 - mmseg - INFO - Iter [79750/80000]	lr: 1.553e-04, eta: 0:06:15, time: 1.455, data_time: 0.010, memory: 18885, decode.loss_seg: 0.1041, decode.acc_seg: 90.9438, aux.loss_seg: 0.0494, aux.acc_seg: 90.5505, loss: 0.1535
2021-08-28 18:37:34,533 - mmseg - INFO - Iter [79800/80000]	lr: 1.453e-04, eta: 0:05:00, time: 1.130, data_time: 0.008, memory: 18885, decode.loss_seg: 0.0978, decode.acc_seg: 90.5337, aux.loss_seg: 0.0493, aux.acc_seg: 89.9660, loss: 0.1471
2021-08-28 18:38:42,447 - mmseg - INFO - Iter [79850/80000]	lr: 1.350e-04, eta: 0:03:45, time: 1.356, data_time: 0.039, memory: 18885, decode.loss_seg: 0.0977, decode.acc_seg: 90.0617, aux.loss_seg: 0.0476, aux.acc_seg: 89.6104, loss: 0.1453
2021-08-28 18:39:48,282 - mmseg - INFO - Iter [79900/80000]	lr: 1.244e-04, eta: 0:02:29, time: 1.319, data_time: 0.040, memory: 18885, decode.loss_seg: 0.0968, decode.acc_seg: 90.9028, aux.loss_seg: 0.0479, aux.acc_seg: 90.3418, loss: 0.1447
2021-08-28 18:40:59,432 - mmseg - INFO - Iter [79950/80000]	lr: 1.132e-04, eta: 0:01:14, time: 1.421, data_time: 0.015, memory: 18885, decode.loss_seg: 0.0987, decode.acc_seg: 90.9844, aux.loss_seg: 0.0499, aux.acc_seg: 90.3986, loss: 0.1486
2021-08-28 18:42:02,992 - mmseg - INFO - Saving checkpoint at 80000 iterations
2021-08-28 18:42:14,512 - mmseg - INFO - Exp name: deeplabv3_r101-v1d-d8_512x1024_80k_cityscapes.py
2021-08-28 18:42:14,526 - mmseg - INFO - Iter [80000/80000]	lr: 1.004e-04, eta: 0:00:00, time: 1.492, data_time: 0.010, memory: 18885, decode.loss_seg: 0.0985, decode.acc_seg: 89.9859, aux.loss_seg: 0.0484, aux.acc_seg: 89.4488, loss: 0.1469
2021-08-28 18:43:51,274 - mmseg - INFO - per class results:
2021-08-28 18:43:51,319 - mmseg - INFO - 
+---------------+-------+-------+
|     Class     |  IoU  |  Acc  |
+---------------+-------+-------+
|      road     | 98.31 |  98.9 |
|    sidewalk   |  86.3 |  94.0 |
|    building   | 93.21 | 96.59 |
|      wall     | 59.56 | 66.73 |
|     fence     | 63.56 |  73.8 |
|      pole     | 67.33 | 79.67 |
| traffic light | 72.49 | 83.43 |
|  traffic sign |  80.5 | 87.11 |
|   vegetation  |  92.8 | 97.01 |
|    terrain    | 65.48 | 73.83 |
|      sky      | 94.92 | 98.13 |
|     person    | 83.02 | 92.04 |
|     rider     | 63.45 | 77.82 |
|      car      | 95.47 |  98.1 |
|     truck     | 79.45 | 85.99 |
|      bus      | 88.77 |  93.8 |
|     train     | 79.51 | 84.89 |
|   motorcycle  | 68.17 | 77.22 |
|    bicycle    | 78.88 | 89.77 |
+---------------+-------+-------+
2021-08-28 18:43:51,320 - mmseg - INFO - Summary:
2021-08-28 18:43:51,320 - mmseg - INFO - 
+-------+-------+-------+
|  aAcc |  mIoU |  mAcc |
+-------+-------+-------+
| 96.39 | 79.54 | 86.78 |
+-------+-------+-------+
2021-08-28 18:43:51,348 - mmseg - INFO - Exp name: deeplabv3_r101-v1d-d8_512x1024_80k_cityscapes.py
2021-08-28 18:43:51,349 - mmseg - INFO - Iter(val) [125]	aAcc: 0.9639, mIoU: 0.7954, mAcc: 0.8678, IoU.road: 0.9831, IoU.sidewalk: 0.8630, IoU.building: 0.9321, IoU.wall: 0.5956, IoU.fence: 0.6356, IoU.pole: 0.6733, IoU.traffic light: 0.7249, IoU.traffic sign: 0.8050, IoU.vegetation: 0.9280, IoU.terrain: 0.6548, IoU.sky: 0.9492, IoU.person: 0.8302, IoU.rider: 0.6345, IoU.car: 0.9547, IoU.truck: 0.7945, IoU.bus: 0.8877, IoU.train: 0.7951, IoU.motorcycle: 0.6817, IoU.bicycle: 0.7888, Acc.road: 0.9890, Acc.sidewalk: 0.9400, Acc.building: 0.9659, Acc.wall: 0.6673, Acc.fence: 0.7380, Acc.pole: 0.7967, Acc.traffic light: 0.8343, Acc.traffic sign: 0.8711, Acc.vegetation: 0.9701, Acc.terrain: 0.7383, Acc.sky: 0.9813, Acc.person: 0.9204, Acc.rider: 0.7782, Acc.car: 0.9810, Acc.truck: 0.8599, Acc.bus: 0.9380, Acc.train: 0.8489, Acc.motorcycle: 0.7722, Acc.bicycle: 0.8977
